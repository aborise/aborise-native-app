import { z } from 'zod';

export const userDataSchema = z.object({
  user: z.object({
    // entitlement: z.object({
    //   addOns: z.array(z.unknown()),
    //   adFree: z.boolean(),
    //   multiPackageTracking: z.string(),
    //   packageCode: z.string(),
    //   packageId: z.object({}),
    //   packageSource: z.string(),
    //   productName: z.string(),
    //   vendorCode: z.string(),
    // }),
    // isLoggedIn: z.boolean(),
    displayName: z.string(),
    // regID: z.number(),
    profile: z.object({
      first_name: z.string(),
      last_name: z.string(),
      email: z.string(),
      connections: z.object({
        facebook: z.boolean(),
        twitter: z.boolean(),
        google: z.boolean(),
      }),
      optIn: z.boolean(),
      profile_type: z.string(),
    }),
    // svod: z.object({
    //   packages: z.array(
    //     z.object({
    //       product_code: z.object({}),
    //       product_name: z.object({}),
    //       product_tier: z.number(),
    //       code: z.string(),
    //       status: z.string(),
    //       source: z.string(),
    //       holding_state: z.string(),
    //       user_can_edit: z.boolean(),
    //       supported_vendor: z.boolean(),
    //       on_trial: z.boolean(),
    //       plan_type: z.object({}),
    //       plan_tier: z.object({}),
    //       addOns: z.array(z.unknown()),
    //       vendor_code: z.object({}),
    //       no_trial: z.boolean(),
    //       mobile_only: z.boolean(),
    //       subscription_country: z.object({}),
    //     }),
    //   ),
    //   status: z.string(), // status: "EX_SUBSCRIBER", "REGISTERED", "SUBSCRIBER"
    //   recurly_package: z.object({}),
    //   user_package: z.object({
    //     product_code: z.object({}),
    //     product_name: z.object({}),
    //     product_tier: z.number(),
    //     code: z.string(),
    //     status: z.string(),
    //     source: z.string(),
    //     holding_state: z.string(),
    //     user_can_edit: z.boolean(),
    //     supported_vendor: z.boolean(),
    //     on_trial: z.boolean(),
    //     plan_type: z.object({}),
    //     plan_tier: z.object({}),
    //     addOns: z.array(z.unknown()),
    //     vendor_code: z.object({}),
    //     no_trial: z.boolean(),
    //     mobile_only: z.boolean(),
    //     subscription_country: z.object({}),
    //   }),
    //   package_status: z.string(),
    //   package_source: z.string(),
    //   package_status_raw: z.string(),
    //   package_code: z.string(),
    //   bundle_status: z.string(),
    //   issues: z.array(z.unknown()),
    //   multi_package_tracking: z.string(),
    // }),
    statusCode: z.string(), // statusCode: "exsub", "reg", "sub"
    isSubscriber: z.boolean(),
    // isThirdParty: z.boolean(),
    isExSubscriber: z.boolean(),
    // isSuspended: z.boolean(),
    // isGhost: z.boolean(),
    // isMVPDAuthZ: z.boolean(),
    // isMVPDAuthZExSub: z.boolean(),
    // isActive: z.boolean(),
    // isPartnerSubscription: z.boolean(),
    // isReseller: z.boolean(),
    // isRecurly: z.boolean(),
    // isLC: z.boolean(),
    // isCF: z.boolean(),
    // isCompUser: z.boolean(),
    // isRegistered: z.boolean(),
    // isOptimum: z.boolean(),
    // isUnsupportedVendor: z.boolean(),
    // isMonthlyPlan: z.boolean(),
    // isAnnualPlan: z.boolean(),
    // canEdit: z.boolean(),
    // provideNativeDeviceSubSettingsLink: z.boolean(),
    // needsUpdate: z.boolean(),
    // edu: z.object({
    //   profile: z.object({}),
    //   coupon: z.object({}),
    // }),
    // isMVPD: z.boolean(),
    // userRegistrationCountry: z.string(),
    // isUserRegionOnSunset: z.boolean(),
    // tags: z.object({
    //   bundleStatus: z.string(),
    //   packageSource: z.string(),
    //   packageStatus: z.string(),
    //   multiPackageTracking: z.string(),
    //   userStatus: z.string(),
    //   userType: z.string(),
    //   vendorCode: z.string(),
    //   userId: z.number(),
    //   userRegId: z.number(),
    //   referenceProfileId: z.number(),
    //   userProfileCategory: z.string(),
    //   userProfileId: z.number(),
    //   userProfileMaster: z.string(),
    //   userProfilePic: z.string(),
    //   userProfilePicPath: z.string(),
    // }),
    // mvpdDispute: z.object({
    //   isDmaInDispute: z.boolean(),
    //   mvpdProvider: z.string(),
    // }),
  }),
});

export type UserData = z.infer<typeof userDataSchema>;

const paramountDate = z.object({
  date: z.string(),
  timezone_type: z.number(),
  timezone: z.string(),
});

export const accountDataSchema = z.object({
  authToken: z.string(),
  user: z.object({
    displayName: z.string(),
    profile: z.object({
      first_name: z.string(),
      last_name: z.string(),
      email: z.string(),
      connections: z.object({
        facebook: z.boolean(),
        twitter: z.boolean(),
        google: z.boolean(),
      }),
      optIn: z.boolean(),
      profile_type: z.string(),
    }),
    svod: z.object({
      status: z.enum(['EX_SUBSCRIBER', 'REGISTERED', 'SUBSCRIBER']),
      user_package: z.object({
        product_code: z.string(),
        product_name: z.string(),
        product_tier: z.number(),
        code: z.string(),
        status: z.string(),
        source: z.string(),
        holding_state: z.string(),
        user_can_edit: z.boolean(),
        supported_vendor: z.boolean(),
        on_trial: z.boolean(),
        plan_type: z.string(),
        plan_tier: z.string(),
        addOns: z.array(z.unknown()),
        vendor_code: z.object({}),
        no_trial: z.boolean(),
        mobile_only: z.boolean(),
        subscription_country: z.string(),
      }),
      package_status: z.string(),
      package_source: z.string(),
      package_status_raw: z.string(),
      package_code: z.string(),
      bundle_status: z.string(),
      issues: z.array(z.unknown()),
      multi_package_tracking: z.string(),
    }),
    isLoggedIn: z.boolean(),
    statusCode: z.enum(['exsub', 'reg', 'sub']),
    isCompUser: z.boolean(),
    isRegistered: z.boolean(),
    isSubscriber: z.boolean(),
    isExSubscriber: z.boolean(),
    isSuspended: z.boolean(),
    isGhost: z.boolean(),
    isThirdParty: z.boolean(),
    isMVPDAuthZ: z.boolean(),
    isMVPDAuthZExSub: z.boolean(),
    isActive: z.boolean(),
    isReseller: z.boolean(),
    isPartnerSubscription: z.boolean(),
    isRecurly: z.boolean(),
    isOptimum: z.boolean(),
    isLC: z.boolean(),
    isCF: z.boolean(),
    isUnsupportedVendor: z.boolean(),
    isMonthlyPlan: z.boolean(),
    isAnnualPlan: z.boolean(),
    canEdit: z.boolean(),
    provideNativeDeviceSubSettingsLink: z.boolean(),
    edu: z.object({
      profile: z.object({}),
      coupon: z.object({}),
    }),
    isMVPD: z.boolean(),
    userRegistrationCountry: z.string(),
    isUserRegionOnSunset: z.object({}),
  }),
  currentSubscription: z.object({
    id: z.string(),
    sub_status: z.string(),
    activeCoupons: z.object({}),
    create_date: paramountDate,
    cancel_date: paramountDate,
    sub_end_date: paramountDate,
    next_bill_date: paramountDate,
    user_plan: z.object({
      href: z.string(),
      planCode: z.string(),
      name: z.string(),
    }),
    plan_bill_amount: z.number(),
    pending_sub: z.object({}),
    addons: z.object({}),
    removed_addons: z.array(z.unknown()),
    can_add_addons: z.array(z.unknown()),
    currency_subunits: z.number(),
    total_overall_amount: z.number(),
    has_active_coupon: z.boolean(),
    coupon: z.object({}),
    coupon_code: z.object({}),
    currency: z.string(),
    next_bill_date_str: z.string(),
  }),
  subscriptionStatus: z.object({
    downgrade_maintenance_mode: z.boolean(),
    scheduled_for_downgrade: z.boolean(),
    cancel_date: z.object({}),
    scheduled_for_cancellation: z.boolean(),
    user_can_cancel: z.boolean(),
  }),
});

export type Plan = {
  planTier: 'standard';
  planType: 'monthly';
};

export type AccountData = z.infer<typeof accountDataSchema>;
